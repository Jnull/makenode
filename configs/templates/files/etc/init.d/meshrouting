#!/bin/sh /etc/rc.common

START=90

# TODO
#  Add connection tracking helpers:
#    https://home.regit.org/netfilter-en/secure-use-of-helpers/

# TODO: We need to somehow detect this after the tunnel comes up
EXITIP=<%= exit_node_mesh_ipv4_addr %>

ETH=eth0
OPEN=open0
PRIV=priv0
TUN=l2tp0
ADHOC=adhoc0

OPENNET=<%= open_subnet_ipv4 %>/24
HOMENET=192.168.0.0/16
MESHNET=10.0.0.0/8
PRIVNET=172.30.0.0/24
BADNET=10.0.0.0/24 # sometimes used by home routers

NODEIP=<%= mesh_addr_ipv4 %>
PRIVIP=172.30.0.1

start() {
    iptables -F INPUT
    iptables -P INPUT ACCEPT
    iptables -F FORWARD
    iptables -P FORWARD ACCEPT
    iptables -t nat -F POSTROUTING

    # Enable IP masquerading for ethernet output (NAT)
    iptables -t nat -A POSTROUTING -o $ETH -j MASQUERADE
    echo 1 > /proc/sys/net/ipv4/ip_forward

    # Enable IP masquerading for private net access to mesh
    iptables -t nat -A POSTROUTING -s $PRIVNET -d $MESHNET -j MASQUERADE 

    # Only allow stuff from mesh to private if is part of
    # an established connection and is from the mesh subnet
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -d $PRIVNET -s $MESHNET -j ACCEPT
    iptables -A INPUT -s $MESHNET -d $PRIVNET -j DROP

    # accept everything local
    iptables -A INPUT -i lo -j ACCEPT

    # ignore anything from or to 10.0.0.0/24
    # since we don't use it for the net
    # and some home routers use it per default
    iptables -A INPUT -s $BADNET -j DROP
    iptables -A INPUT -d $BADNET -j DROP

    # allow packets from the open, mesh and priv interfaces as long as the IP's are correct
    iptables -A INPUT -i $ADHOC -s $MESHNET -j ACCEPT
    iptables -A INPUT -i $TUN -s $MESHNET -j ACCEPT
    iptables -A INPUT -i $OPEN -s $MESHNET -j ACCEPT
    iptables -A INPUT -i $PRIV -s $PRIVNET -j ACCEPT

    # allow DHCP on open and priv
    iptables -A INPUT -i $OPEN -p udp --dport 67:68 --sport 67:68 -j ACCEPT
    iptables -A INPUT -i $PRIV -p udp --dport 67:68 --sport 67:68 -j ACCEPT

    # allow established connections from ethernet
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -i $ETH -j ACCEPT

    iptables -A INPUT -i $ETH -s $HOMENET -j ACCEPT
    iptables -P INPUT DROP

    ### FORWARDING ###

    # ignore anything from or to 10.0.0.0/24
    # since we don't use it for the net
    # and some home routers use it per default
    iptables -A FORWARD -s $BADNET -j DROP
    iptables -A FORWARD -d $BADNET -j DROP

    # Allow traffic from mesh interfaces as long as it's not headed for privnet
    iptables -A FORWARD -i $OPEN -s $MESHNET ! -d $PRIVNET -j ACCEPT
    iptables -A FORWARD -i $ADHOC -s $MESHNET ! -d $PRIVNET -j ACCEPT
    iptables -A FORWARD -i $TUN -s $MESHNET ! -d $PRIVNET -j ACCEPT

    # Allow all traffic from privnet
    iptables -A FORWARD -i $PRIV -s $PRIVNET -j ACCEPT

    # allow forwarding of established connections from private
    iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
    #iptables -A FORWARD -m state --state NEW -i $PRIV -j ACCEPT # TODO probably not needed

    # No traffic from TUN to PRIV or from PRIV to TUN
    iptables -A FORWARD -i $TUN -o $PRIV -j DROP
    iptables -A FORWARD -i $PRIV -o $TUN -j DROP

    # no mesh to internet forward (only through tunnel)
    iptables -A FORWARD -i $ADHOC -o $ETH -j DROP
    iptables -A FORWARD -i $OPEN -o $ETH -j DROP
    iptables -A FORWARD -i $TUN -o $ETH -j DROP


    # Set MSS for tcp because of tunnel
    iptables -t mangle -A FORWARD -o $TUN -p tcp -m tcp --tcp-flags SYN,RST SYN -s $OPENNET -j TCPMSS --set-mss 1398

    iptables -P FORWARD DROP

    # no internet to internet forward
    iptables -A FORWARD -i $ETH -o $ETH -j DROP

    ip route add $OPENNET dev $OPEN  proto kernel  scope link  src $NODEIP table public

    ip rule del from $MESHNET prio 16000 table public
    ip rule del to $MESHNET prio 16000 table public

    ip rule add from $MESHNET prio 16000 table public
    ip rule add to $MESHNET prio 16000 table public

    ip route flush cache 

}

stop() {
    # TODO implement stop
    echo 
}
